CLEAN CODE

Certainly! Here are five points highlighting clean code practices in the provided Python script:

1. **Modularization:**
    - **Explanation:** The script is modularized into functions, making the code more readable and maintainable. Each quiz is a separate function (`run_quiz`), and the main logic for quiz selection and user interaction is kept in the `__main__` block.
    - **Example:** The `run_quiz` function encapsulates the logic for running a quiz. This makes it easy to understand and modify the quiz behavior independently of other parts of the code.

2. **Descriptive Variable and Function Names:**
    - **Explanation:** Variable and function names are descriptive and convey their purpose, enhancing code readability.
    - **Example:** Variable names like `CORRECT_MARKS`, `INCORRECT_PENALTY`, and function names like `run_quiz` clearly indicate their roles in the code.

3. **Consistent Formatting and Indentation:**
    - **Explanation:** The code follows consistent formatting and indentation, adhering to Python conventions (PEP 8). This promotes a visually clean and organized codebase.
    - **Example:** The consistent use of four spaces for indentation and the proper placement of newlines contribute to code readability.

4. **Error Handling:**
    - **Explanation:** The code includes error handling mechanisms for user input, preventing crashes and providing feedback on invalid inputs.
    - **Example:** The use of try-except blocks in parsing user input ensures that the program gracefully handles potential errors, such as non-integer inputs or index errors.

5. **Comments for Clarification:**
    - **Explanation:** The script includes comments to explain the purpose and functionality of certain code blocks, enhancing understanding for anyone reading the code.
    - **Example:** Comments like `# Define constants for marks` and `# Invalid input. Skipping question.` provide additional context for the reader.

These clean code practices contribute to code maintainability, readability, and ease of understanding. They follow common best practices, making it simpler for others (or yourself in the future) to comprehend and modify the code.
